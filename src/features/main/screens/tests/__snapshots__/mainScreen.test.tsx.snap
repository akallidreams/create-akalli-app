// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should test Main Screen should render the title value 1`] = `
<View
  height="100%"
  style={
    Array [
      Object {
        "height": "100%",
      },
      Object {
        "alignItems": "center",
        "justifyContent": "center",
      },
    ]
  }
>
  <Text
    style={
      Array [
        Object {},
        Object {
          "fontWeight": "bold",
        },
      ]
    }
  >
    Welcome to Create akalli app
  </Text>
  <View
    my="20px"
    style={
      Array [
        Object {
          "marginBottom": 20,
          "marginTop": 20,
        },
      ]
    }
  >
    <Text
      fontSize="lg"
      style={
        Array [
          Object {
            "fontSize": 22,
          },
        ]
      }
      testID="dti-title"
    >
      Logged in
    </Text>
  </View>
  <View
    style={
      Array [
        Object {},
      ]
    }
  >
    <Text
      style={
        Array [
          Object {},
          Object {
            "fontStyle": "italic",
          },
        ]
      }
    >
      I am a more descriptive conditional option
    </Text>
  </View>
  <View
    flewGrowth="0"
    maxHeight="100px"
    mt="20px"
    style={
      Array [
        Object {
          "marginTop": 20,
          "maxHeight": 100,
        },
        Object {
          "justifyContent": "center",
        },
      ]
    }
  >
    <RCTScrollView
      data={
        Array [
          1,
          2,
          3,
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      style={
        Array [
          Object {},
        ]
      }
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <Text
            style={
              Array [
                Object {},
              ]
            }
          >
            1
             I am a flatlist with autogenerated keys
          </Text>
        </View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <Text
            style={
              Array [
                Object {},
              ]
            }
          >
            2
             I am a flatlist with autogenerated keys
          </Text>
        </View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <Text
            style={
              Array [
                Object {},
              ]
            }
          >
            3
             I am a flatlist with autogenerated keys
          </Text>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <Text
    color="success"
    style={
      Array [
        Object {
          "color": "#459EA8",
        },
      ]
    }
  >
    An input with a minLength validation
  </Text>
  <TextInput
    borderBottomWidth="1px"
    borderColor="success"
    color="success"
    mb="20px"
    onBlur={[Function]}
    onChangeText={[Function]}
    style={
      Array [
        Object {
          "borderBottomWidth": 1,
          "borderColor": "#459EA8",
          "color": "#459EA8",
          "marginBottom": 20,
          "width": 220,
        },
      ]
    }
    value=""
    width="220px"
  />
  <View
    accessible={true}
    bg="transparent"
    borderColor="primary"
    borderWidth={1}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Array [
        Object {
          "alignItems": "center",
          "alignSelf": "center",
          "backgroundColor": undefined,
          "borderRadius": 5,
          "flexDirection": "row",
          "justifyContent": "center",
          "paddingBottom": 10,
          "paddingLeft": 10,
          "paddingRight": 10,
          "paddingTop": 10,
        },
      ]
    }
  >
    <Text
      color="primary"
      style={
        Array [
          Object {
            "color": "#261665",
          },
        ]
      }
    >
      I am a button
    </Text>
  </View>
</View>
`;
